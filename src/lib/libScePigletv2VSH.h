#pragma once

// Params should go here....

// code goes here
// example ABI_SYSV int test(int input);
void _OrbisTextureImage2DCanvas();
void eglBindAPI();
void eglBindTexImage();
void eglChooseConfig();
void eglCopyBuffers();
void eglCreateContext();
void eglCreatePbufferFromClientBuffer();
void eglCreatePbufferSurface();
void eglCreatePixmapSurface();
void eglCreateWindowSurface();
void eglDestroyContext();
void eglDestroySurface();
void eglGetConfigAttrib();
void eglGetConfigs();
void eglGetCurrentContext();
void eglGetCurrentDisplay();
void eglGetCurrentSurface();
void eglGetDisplay();
void eglGetError();
void eglGetProcAddress();
void eglInitialize();
void eglMakeCurrent();
void eglQueryAPI();
void eglQueryContext();
void eglQueryString();
void eglQuerySurface();
void eglReleaseTexImage();
void eglReleaseThread();
void eglSurfaceAttrib();
void eglSwapBuffers();
void eglSwapInterval();
void eglTerminate();
void eglWaitClient();
void eglWaitGL();
void eglWaitNative();
void glActiveTexture();
void glAttachShader();
void glBeginQuery();
void glBeginQueryEXT();
void glBeginTransformFeedback();
void glBindAttribLocation();
void glBindBuffer();
void glBindBufferBase();
void glBindBufferRange();
void glBindFramebuffer();
void glBindRenderbuffer();
void glBindSampler();
void glBindTexture();
void glBindTransformFeedback();
void glBindVertexArray();
void glBlendColor();
void glBlendEquation();
void glBlendEquationSeparate();
void glBlendFunc();
void glBlendFuncSeparate();
void glBlitFramebuffer();
void glBufferData();
void glBufferSubData();
void glCheckFramebufferStatus();
void glClear();
void glClearBufferfi();
void glClearBufferfv();
void glClearBufferiv();
void glClearBufferuiv();
void glClearColor();
void glClearDepthf();
void glClearStencil();
void glClientWaitSync();
void glColorMask();
void glCompileShader();
void glCompressedTexImage2D();
void glCompressedTexImage3D();
void glCompressedTexSubImage2D();
void glCompressedTexSubImage3D();
void glCopyBufferSubData();
void glCopyTexImage2D();
void glCopyTexSubImage2D();
void glCopyTexSubImage3D();
void glCreateProgram();
void glCreateShader();
void glCullFace();
void glDeleteBuffers();
void glDeleteFramebuffers();
void glDeleteProgram();
void glDeleteQueries();
void glDeleteQueriesEXT();
void glDeleteRenderbuffers();
void glDeleteSamplers();
void glDeleteShader();
void glDeleteSync();
void glDeleteTextures();
void glDeleteTransformFeedbacks();
void glDeleteVertexArrays();
void glDepthFunc();
void glDepthMask();
void glDepthRangef();
void glDetachShader();
void glDisable();
void glDisableVertexAttribArray();
void glDrawArrays();
void glDrawArraysInstanced();
void glDrawArraysInstancedEXT();
void glDrawBuffers();
void glDrawElements();
void glDrawElementsInstanced();
void glDrawElementsInstancedEXT();
void glDrawRangeElements();
void glEnable();
void glEnableVertexAttribArray();
void glEndQuery();
void glEndQueryEXT();
void glEndTransformFeedback();
void glFenceSync();
void glFinish();
void glFlush();
void glFlushMappedBufferRange();
void glFramebufferRenderbuffer();
void glFramebufferTexture2D();
void glFramebufferTextureLayer();
void glFrontFace();
void glGenBuffers();
void glGenerateMipmap();
void glGenFramebuffers();
void glGenQueries();
void glGenQueriesEXT();
void glGenRenderbuffers();
void glGenSamplers();
void glGenTextures();
void glGenTransformFeedbacks();
void glGenVertexArrays();
void glGetActiveAttrib();
void glGetActiveUniform();
void glGetActiveUniformBlockiv();
void glGetActiveUniformBlockName();
void glGetActiveUniformsiv();
void glGetAttachedShaders();
void glGetAttribLocation();
void glGetBooleanv();
void glGetBufferParameteri64v();
void glGetBufferParameteriv();
void glGetBufferPointerv();
void glGetError();
void glGetFloatv();
void glGetFragDataLocation();
void glGetFramebufferAttachmentParameteriv();
void glGetInteger64i_v();
void glGetInteger64v();
void glGetIntegeri_v();
void glGetIntegerv();
void glGetInternalformativ();
void glGetProgramBinary();
void glGetProgramInfoLog();
void glGetProgramiv();
void glGetQueryiv();
void glGetQueryObjecti64vEXT();
void glGetQueryObjectivEXT();
void glGetQueryObjectui64vEXT();
void glGetQueryObjectuiv();
void glGetQueryObjectuivEXT();
void glGetRenderbufferParameteriv();
void glGetSamplerParameterfv();
void glGetSamplerParameteriv();
void glGetShaderInfoLog();
void glGetShaderiv();
void glGetShaderPrecisionFormat();
void glGetShaderSource();
void glGetString();
void glGetStringi();
void glGetSynciv();
void glGetTexParameterfv();
void glGetTexParameteriv();
void glGetTransformFeedbackVarying();
void glGetUniformBlockIndex();
void glGetUniformfv();
void glGetUniformIndices();
void glGetUniformiv();
void glGetUniformLocation();
void glGetUniformuiv();
void glGetVertexAttribfv();
void glGetVertexAttribIiv();
void glGetVertexAttribIuiv();
void glGetVertexAttribiv();
void glGetVertexAttribPointerv();
void glHint();
void glInsertEventMarkerColorSCE();
void glInsertEventMarkerEXT();
void glInvalidateFramebuffer();
void glInvalidateSubFramebuffer();
void glIsBuffer();
void glIsEnabled();
void glIsFramebuffer();
void glIsProgram();
void glIsQuery();
void glIsQueryEXT();
void glIsRenderbuffer();
void glIsSampler();
void glIsShader();
void glIsSync();
void glIsTexture();
void glIsTransformFeedback();
void glIsVertexArray();
void glLineWidth();
void glLinkProgram();
void glMapBufferRange();
void glPauseTransformFeedback();
void glPigletGetShaderBinarySCE();
void glPixelStorei();
void glPolygonOffset();
void glPopGroupMarkerEXT();
void glProgramBinary();
void glProgramParameteri();
void glPushGroupMarkerColorSCE();
void glPushGroupMarkerEXT();
void glQueryCounterEXT();
void glReadBuffer();
void glReadPixels();
void glReleaseShaderCompiler();
void glRenderbufferStorage();
void glRenderbufferStorageMultisample();
void glResumeTransformFeedback();
void glSampleCoverage();
void glSamplerParameterf();
void glSamplerParameterfv();
void glSamplerParameteri();
void glSamplerParameteriv();
void glScissor();
void glShaderBinary();
void glShaderSource();
void glStencilFunc();
void glStencilFuncSeparate();
void glStencilMask();
void glStencilMaskSeparate();
void glStencilOp();
void glStencilOpSeparate();
void glTexImage2D();
void glTexImage3D();
void glTexParameterf();
void glTexParameterfv();
void glTexParameteri();
void glTexParameteriv();
void glTexStorage2D();
void glTexStorage2DEXT();
void glTexStorage3D();
void glTexSubImage2D();
void glTexSubImage3D();
void glTextureStorage2DEXT();
void glTransformFeedbackVaryings();
void glUniform1f();
void glUniform1fv();
void glUniform1i();
void glUniform1iv();
void glUniform1ui();
void glUniform1uiv();
void glUniform2f();
void glUniform2fv();
void glUniform2i();
void glUniform2iv();
void glUniform2ui();
void glUniform2uiv();
void glUniform3f();
void glUniform3fv();
void glUniform3i();
void glUniform3iv();
void glUniform3ui();
void glUniform3uiv();
void glUniform4f();
void glUniform4fv();
void glUniform4i();
void glUniform4iv();
void glUniform4ui();
void glUniform4uiv();
void glUniformBlockBinding();
void glUniformMatrix2fv();
void glUniformMatrix2x3fv();
void glUniformMatrix2x4fv();
void glUniformMatrix3fv();
void glUniformMatrix3x2fv();
void glUniformMatrix3x4fv();
void glUniformMatrix4fv();
void glUniformMatrix4x2fv();
void glUniformMatrix4x3fv();
void glUnmapBuffer();
void glUseProgram();
void glValidateProgram();
void glVertexAttrib1f();
void glVertexAttrib1fv();
void glVertexAttrib2f();
void glVertexAttrib2fv();
void glVertexAttrib3f();
void glVertexAttrib3fv();
void glVertexAttrib4f();
void glVertexAttrib4fv();
void glVertexAttribDivisor();
void glVertexAttribDivisorEXT();
void glVertexAttribI4i();
void glVertexAttribI4iv();
void glVertexAttribI4ui();
void glVertexAttribI4uiv();
void glVertexAttribIPointer();
void glVertexAttribPointer();
void glViewport();
void glWaitSync();
void scePigletAllocateSystemMemoryEx();
void scePigletAllocateVideoMemoryEx();
void scePigletGetConfigurationVSH();
void scePigletGetInteger();
void scePigletGetShaderCacheConfiguration();
void scePigletGetUsageVSH();
void scePigletHeapDump();
void scePigletHeapGetInfo();
void scePigletReleaseSystemMemoryEx();
void scePigletReleaseVideoMemoryEx();
void scePigletSetConfigurationVSH();
void scePigletSetShaderCacheConfiguration();
