#pragma once

// Params should go here....

// code goes here
// example ABI_SYSV int test(int input);
void CA_MGMT_allocCertDistinguishedName();
void CA_MGMT_certDistinguishedNameCompare();
void CA_MGMT_convertKeyBlobToPKCS8Key();
void CA_MGMT_convertKeyDER();
void CA_MGMT_convertKeyPEM();
void CA_MGMT_convertPKCS8KeyToKeyBlob();
void CA_MGMT_convertProtectedPKCS8KeyToKeyBlob();
void CA_MGMT_decodeCertificate();
void CA_MGMT_enumAltName();
void CA_MGMT_enumCrl();
void CA_MGMT_extractAllCertDistinguishedName();
void CA_MGMT_extractBasicConstraint();
void CA_MGMT_extractCertASN1Name();
void CA_MGMT_extractCertTimes();
void CA_MGMT_extractKeyBlobEx();
void CA_MGMT_extractKeyBlobTypeEx();
void CA_MGMT_extractPublicKeyInfo();
void CA_MGMT_extractSerialNum();
void CA_MGMT_extractSignature();
void CA_MGMT_free();
void CA_MGMT_freeCertDistinguishedName();
void CA_MGMT_freeCertDistinguishedNameOnStack();
void CA_MGMT_freeCertificate();
void CA_MGMT_freeKeyBlob();
void CA_MGMT_freeSearchDetails();
void CA_MGMT_getCertSignAlgoType();
void CA_MGMT_keyBlobToDER();
void CA_MGMT_keyBlobToPEM();
void CA_MGMT_makeKeyBlobEx();
void CA_MGMT_rawVerifyOID();
void CA_MGMT_reorderChain();
void CA_MGMT_returnCertificatePrints();
void CA_MGMT_verifyCertWithKeyBlob();
void CA_MGMT_verifySignature();
void CERT_checkCertificateIssuer();
void CERT_checkCertificateIssuer2();
void CERT_checkCertificateIssuerSerialNumber();
void CERT_CompSubjectAltNames();
void CERT_CompSubjectAltNames2();
void CERT_CompSubjectAltNamesExact();
void CERT_CompSubjectCommonName();
void CERT_CompSubjectCommonName2();
void CERT_ComputeBufferHash();
void CERT_decryptRSASignature();
void CERT_decryptRSASignatureBuffer();
void CERT_enumerateAltName();
void CERT_enumerateAltName2();
void CERT_enumerateCRL();
void CERT_enumerateCRL2();
void CERT_enumerateCRLAux();
void CERT_extractAllDistinguishedNames();
void CERT_extractDistinguishedNames();
void CERT_extractDistinguishedNames2();
void CERT_extractDistinguishedNamesFromName();
void CERT_extractRSAKey();
void CERT_extractSerialNum();
void CERT_extractSerialNum2();
void CERT_extractValidityTime();
void CERT_extractValidityTime2();
void CERT_getCertExtension();
void CERT_getCertificateExtensions();
void CERT_getCertificateExtensions2();
void CERT_getCertificateIssuerSerialNumber();
void CERT_getCertificateIssuerSerialNumber2();
void CERT_getCertificateKeyUsage();
void CERT_getCertificateKeyUsage2();
void CERT_getCertificateSubject();
void CERT_getCertificateSubject2();
void CERT_getCertSignAlgoType();
void CERT_GetCertTime();
void CERT_getNumberOfChild();
void CERT_getRSASignatureAlgo();
void CERT_getSignatureItem();
void CERT_getSubjectCommonName();
void CERT_getSubjectCommonName2();
void CERT_isRootCertificate();
void CERT_isRootCertificate2();
void CERT_rawVerifyOID();
void CERT_rawVerifyOID2();
void CERT_setKeyFromSubjectPublicKeyInfo();
void CERT_setKeyFromSubjectPublicKeyInfoCert();
void CERT_STORE_addCertAuthority();
void CERT_STORE_addIdentity();
void CERT_STORE_addIdentityNakedKey();
void CERT_STORE_addIdentityPSK();
void CERT_STORE_addIdentityWithCertificateChain();
void CERT_STORE_addTrustPoint();
void CERT_STORE_createStore();
void CERT_STORE_findCertBySubject();
void CERT_STORE_findIdentityByTypeFirst();
void CERT_STORE_findIdentityByTypeNext();
void CERT_STORE_findIdentityCertChainFirst();
void CERT_STORE_findIdentityCertChainNext();
void CERT_STORE_findPskByIdentity();
void CERT_STORE_releaseStore();
void CERT_STORE_traversePskListHead();
void CERT_STORE_traversePskListNext();
void CERT_validateCertificate();
void CERT_validateCertificateWithConf();
void CERT_VerifyCertificatePolicies();
void CERT_VerifyCertificatePolicies2();
void CERT_verifySignature();
void CERT_VerifyValidityTime();
void CERT_VerifyValidityTime2();
void CERT_VerifyValidityTimeWithConf();
void CRYPTO_initAsymmetricKey();
void CRYPTO_uninitAsymmetricKey();
void GC_createInstanceIDs();
void getCertSigAlgo();
void MOCANA_freeMocana();
void MOCANA_initMocana();
void RSA_verifySignature();
void sceSslCheckRecvPending();
void sceSslClose();
void sceSslConnect();
void sceSslCreateSslConnection();
void sceSslDeleteSslConnection();
void sceSslDisableOption();
void sceSslDisableOptionInternal();
void sceSslDisableOptionInternalInsecure();
void sceSslEnableOption();
void sceSslEnableOptionInternal();
void sceSslFreeCaCerts();
void sceSslFreeCaList();
void sceSslFreeSslCertName();
void sceSslGetCaCerts();
void sceSslGetCaList();
void sceSslGetIssuerName();
void sceSslGetMemoryPoolStats();
void sceSslGetNameEntryCount();
void sceSslGetNameEntryInfo();
void sceSslGetNanoSSLModuleId();
void sceSslGetNotAfter();
void sceSslGetNotBefore();
void sceSslGetSerialNumber();
void sceSslGetSslError();
void sceSslGetSubjectName();
void sceSslInit();
void sceSslLoadCert();
void sceSslLoadRootCACert();
void sceSslRecv();
void sceSslReuseConnection();
void sceSslSend();
void sceSslSetMinSslVersion();
void sceSslSetSslVersion();
void sceSslSetVerifyCallback();
void sceSslShowMemoryStat();
void sceSslTerm();
void sceSslUnloadCert();
void SSL_acceptConnection();
void SSL_acceptConnectionCommon();
void SSL_assignCertificateStore();
void SSL_ASYNC_acceptConnection();
void SSL_ASYNC_closeConnection();
void SSL_ASYNC_connect();
void SSL_ASYNC_connectCommon();
void SSL_ASYNC_getRecvBuffer();
void SSL_ASYNC_getSendBuffer();
void SSL_ASYNC_init();
void SSL_ASYNC_initServer();
void SSL_ASYNC_recvMessage();
void SSL_ASYNC_recvMessage2();
void SSL_ASYNC_sendMessage();
void SSL_ASYNC_sendMessagePending();
void SSL_ASYNC_start();
void SSL_closeConnection();
void SSL_connect();
void SSL_connectWithCfgParam();
void SSL_enableCiphers();
void SSL_findConnectionInstance();
void SSL_getCipherInfo();
void SSL_getClientRandom();
void SSL_getClientSessionInfo();
void SSL_getCookie();
void SSL_getInstanceFromSocket();
void SSL_getNextSessionId();
void SSL_getServerRandom();
void SSL_getSessionCache();
void SSL_getSessionFlags();
void SSL_getSessionInfo();
void SSL_getSessionStatus();
void SSL_getSocketId();
void SSL_getSSLTLSVersion();
void SSL_init();
void SSL_initiateRehandshake();
void SSL_initServerCert();
void SSL_ioctl();
void SSL_isSessionSSL();
void SSL_lockSessionCacheMutex();
void SSL_lookupAlert();
void SSL_negotiateConnection();
void SSL_recv();
void SSL_recvPending();
void SSL_releaseTables();
void SSL_retrieveServerNameList();
void SSL_rngFun();
void SSL_send();
void SSL_sendAlert();
void SSL_sendPending();
void SSL_setCookie();
void SSL_setServerCert();
void SSL_setServerNameList();
void SSL_setSessionFlags();
void SSL_shutdown();
void SSL_sslSettings();
void SSL_validateCertParam();
void VLONG_freeVlongQueue();
